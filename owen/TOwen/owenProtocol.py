# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_owen', [dirname(__file__)])
        except ImportError:
            import _owen
            return _owen
        if fp is not None:
            try:
                _mod = imp.load_module('_owen', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _owen = swig_import_helper()
    del swig_import_helper
else:
    import _owen
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


maxFrameSize = _owen.maxFrameSize
maxAsciiFrameSize = _owen.maxAsciiFrameSize
class OwenProtocolFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OwenProtocolFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OwenProtocolFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _owen.OwenProtocolFrame_address_set
    __swig_getmethods__["address"] = _owen.OwenProtocolFrame_address_get
    if _newclass:address = _swig_property(_owen.OwenProtocolFrame_address_get, _owen.OwenProtocolFrame_address_set)
    __swig_setmethods__["addrLen"] = _owen.OwenProtocolFrame_addrLen_set
    __swig_getmethods__["addrLen"] = _owen.OwenProtocolFrame_addrLen_get
    if _newclass:addrLen = _swig_property(_owen.OwenProtocolFrame_addrLen_get, _owen.OwenProtocolFrame_addrLen_set)
    __swig_setmethods__["request"] = _owen.OwenProtocolFrame_request_set
    __swig_getmethods__["request"] = _owen.OwenProtocolFrame_request_get
    if _newclass:request = _swig_property(_owen.OwenProtocolFrame_request_get, _owen.OwenProtocolFrame_request_set)
    __swig_setmethods__["hash"] = _owen.OwenProtocolFrame_hash_set
    __swig_getmethods__["hash"] = _owen.OwenProtocolFrame_hash_get
    if _newclass:hash = _swig_property(_owen.OwenProtocolFrame_hash_get, _owen.OwenProtocolFrame_hash_set)
    __swig_setmethods__["dataSize"] = _owen.OwenProtocolFrame_dataSize_set
    __swig_getmethods__["dataSize"] = _owen.OwenProtocolFrame_dataSize_get
    if _newclass:dataSize = _swig_property(_owen.OwenProtocolFrame_dataSize_get, _owen.OwenProtocolFrame_dataSize_set)
    __swig_setmethods__["data"] = _owen.OwenProtocolFrame_data_set
    __swig_getmethods__["data"] = _owen.OwenProtocolFrame_data_get
    if _newclass:data = _swig_property(_owen.OwenProtocolFrame_data_get, _owen.OwenProtocolFrame_data_set)
    __swig_setmethods__["crc"] = _owen.OwenProtocolFrame_crc_set
    __swig_getmethods__["crc"] = _owen.OwenProtocolFrame_crc_get
    if _newclass:crc = _swig_property(_owen.OwenProtocolFrame_crc_get, _owen.OwenProtocolFrame_crc_set)
    __swig_setmethods__["crc_ok"] = _owen.OwenProtocolFrame_crc_ok_set
    __swig_getmethods__["crc_ok"] = _owen.OwenProtocolFrame_crc_ok_get
    if _newclass:crc_ok = _swig_property(_owen.OwenProtocolFrame_crc_ok_get, _owen.OwenProtocolFrame_crc_ok_set)
    def __init__(self): 
        this = _owen.new_OwenProtocolFrame()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _owen.delete_OwenProtocolFrame
    __del__ = lambda self : None;
OwenProtocolFrame_swigregister = _owen.OwenProtocolFrame_swigregister
OwenProtocolFrame_swigregister(OwenProtocolFrame)


def appendIndexAndTime(*args):
  return _owen.appendIndexAndTime(*args)
appendIndexAndTime = _owen.appendIndexAndTime

def id2hash(*args):
  return _owen.id2hash(*args)
id2hash = _owen.id2hash

def name2id(*args):
  return _owen.name2id(*args)
name2id = _owen.name2id

def packFrame(*args):
  return _owen.packFrame(*args)
packFrame = _owen.packFrame

def packFrameToAscii(*args):
  return _owen.packFrameToAscii(*args)
packFrameToAscii = _owen.packFrameToAscii

def unpackFrame(*args):
  return _owen.unpackFrame(*args)
unpackFrame = _owen.unpackFrame

def unpackIEEE32(*args):
  return _owen.unpackIEEE32(*args)
unpackIEEE32 = _owen.unpackIEEE32

def unpackAsciiFrame(*args):
  return _owen.unpackAsciiFrame(*args)
unpackAsciiFrame = _owen.unpackAsciiFrame

def sum(*args):
  return _owen.sum(*args)
sum = _owen.sum

def new_uCharA(*args):
  return _owen.new_uCharA(*args)
new_uCharA = _owen.new_uCharA

def delete_uCharA(*args):
  return _owen.delete_uCharA(*args)
delete_uCharA = _owen.delete_uCharA

def uCharA_getitem(*args):
  return _owen.uCharA_getitem(*args)
uCharA_getitem = _owen.uCharA_getitem

def uCharA_setitem(*args):
  return _owen.uCharA_setitem(*args)
uCharA_setitem = _owen.uCharA_setitem

def new_intp():
  return _owen.new_intp()
new_intp = _owen.new_intp

def copy_intp(*args):
  return _owen.copy_intp(*args)
copy_intp = _owen.copy_intp

def delete_intp(*args):
  return _owen.delete_intp(*args)
delete_intp = _owen.delete_intp

def intp_assign(*args):
  return _owen.intp_assign(*args)
intp_assign = _owen.intp_assign

def intp_value(*args):
  return _owen.intp_value(*args)
intp_value = _owen.intp_value

def new_floatp():
  return _owen.new_floatp()
new_floatp = _owen.new_floatp

def copy_floatp(*args):
  return _owen.copy_floatp(*args)
copy_floatp = _owen.copy_floatp

def delete_floatp(*args):
  return _owen.delete_floatp(*args)
delete_floatp = _owen.delete_floatp

def floatp_assign(*args):
  return _owen.floatp_assign(*args)
floatp_assign = _owen.floatp_assign

def floatp_value(*args):
  return _owen.floatp_value(*args)
floatp_value = _owen.floatp_value
# This file is compatible with both classic and new-style classes.


